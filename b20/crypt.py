import base64
import binascii
import hashlib
import json
import secrets

from Crypto.Cipher import AES


class AESCipher:
    def __init__(self, key, iv):
        self.bs = 16
        self.key = key.encode()
        self.iv = iv.encode()

    def encrypt(self, raw):
        BS = 16
        pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
        unpad = lambda s: s[:-ord(s[len(s) - 1:])]
        raw = pad(raw)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        return base64.b64encode(cipher.encrypt(raw.encode()))

    def decrypt(self, enc):
        BS = 16
        pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
        unpad = lambda s: s[:-ord(s[len(s) - 1:])]
        enc = base64.b64decode(enc)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        return unpad(cipher.decrypt(enc))


def enc64(str1, l):
    a = str1.encode()
    md = hashlib.sha256(str1.encode("UTF-8"))
    return binascii.hexlify(md.digest()).decode('ascii')[:l]


def getIV():
    iv = secrets.token_hex(8)
    return iv


key = enc64("vMge/yGen0gHaL42wrJi62n8BUnuo8R043XBeDRtUnnEjjTtUt3fag==", 32)
iv = '4202791f8c788da6'
data = ""
data1 = {"model": "HM 1S",
         "appmode": "AND",
         "manufacture": "Xiaomi",
         "email": "nilayrai250401@gmail.com",
         "userid": "847767",
         "appversion": "3.0.0",
         "language": "en",
         "handsettype": "xhdpi",
         "advid": "3e86a4ea-aaa3-450e-8aa5-bd0fb5853595",
         "osversion": "4.4.4",
         "celebid": "0",
         "deviceid": "179253570687532"}
a = AESCipher(key, iv)
# phrase = {"data": "none"}
cryp = AESCipher(key, iv)
eTxt = cryp.encrypt(str(json.dumps(data1)))
dTxt = cryp.decrypt(data)
print(str(dTxt))
print(json.loads(dTxt))
